---
description: 
globs: 
alwaysApply: true
---
CMS Project Specification for cms-project

  You are an expert in Laravel, PHP, and related web development technologies.

  Key Principles
  - Write concise, technical responses with accurate PHP examples.
  - Follow Laravel best practices and conventions.
  - Use object-oriented programming with a focus on SOLID principles.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable and method names.
  - Use lowercase with dashes for directories (e.g., app/Http/Controllers).
  - Favor dependency injection and service containers.

  PHP/Laravel
  - Use PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
  - Follow PSR-12 coding standards.
  - Use strict typing: declare(strict_types=1);
  - Utilize Laravel's built-in features and helpers when possible.
  - File structure: Follow Laravel's directory structure and naming conventions.
  - Implement proper error handling and logging:
    - Use Laravel's exception handling and logging features.
    - Create custom exceptions when necessary.
    - Use try-catch blocks for expected exceptions.
  - Use Laravel's validation features for form and request validation.
  - Implement middleware for request filtering and modification.
  - Utilize Laravel's Eloquent ORM for database interactions.
  - Use Laravel's query builder for complex database queries.
  - Implement proper database migrations and seeders.

  Dependencies
  - Laravel (latest stable version)
  - Composer for dependency management

  Laravel Best Practices
  - Use Eloquent ORM instead of raw SQL queries when possible.
  - Implement Repository pattern for data access layer.
  - Use Laravel's built-in authentication and authorization features.
  - Utilize Laravel's caching mechanisms for improved performance.
  - Implement job queues for long-running tasks.
  - Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
  - Implement API versioning for public APIs.
  - Use Laravel's localization features for multi-language support.
  - Implement proper CSRF protection and security measures.
  - Use Laravel Mix for asset compilation.
  - Implement proper database indexing for improved query performance.
  - Use Laravel's built-in pagination features.
  - Implement proper error logging and monitoring.

  Key Conventions
  1. Follow Laravel's MVC architecture.
  2. Use Laravel's routing system for defining application endpoints.
  3. Implement proper request validation using Form Requests.
  4. Use Laravel's Blade templating engine for views.
  5. Implement proper database relationships using Eloquent.
  6. Use Laravel's built-in authentication scaffolding.
  7. Implement proper API resource transformations.
  8. Use Laravel's event and listener system for decoupled code.
  9. Implement proper database transactions for data integrity.
  10. Use Laravel's built-in scheduling features for recurring tasks.
  

üìä Overview

We are building a modern, full-featured CMS using Laravel (PHP 8.1+) + MySQL, with server-side rendering (Blade templating), structured modules, authentication, and admin features. The CMS will support manual and imported articles, role-based permissions, user comments, subscriptions, and ad placement. It must be SEO-optimized, modular, and ready for AI integration.

‚ú® Core Modules

1. User System

Laravel Breeze or Fortify authentication scaffolding

Roles: admin, user

Middleware-based role access control

2. Content Management

Eloquent-based Article model with CRUD features

Fields: title, slug, content, cover_image, is_imported, source_url

Rich text editing (via Trix/TipTap or CKEditor)

Categories and optional tags with relationships

3. Auto News Import Module

Artisan command + RSS parsing (using simplexml or spatie/rss)

Map fields into articles table with slug + source_url

Mark is_imported = true

4. Comments

Authenticated users can comment on articles

Comments table linked to article_id and user_id

Admin can moderate comments in backend

5. Newsletter Subscriptions

subscribers table for storing emails

Blade-based email subscription form

Optional queueable notification

6. Admin Panel

Protected routes with middleware (role:admin)

CRUD management for articles, comments, subscribers

Dashboard: article stats, recent comments, counts

7. Ad System

Eloquent Ad model: title, image, target_url, position, active_from/to

Partial Blade component to display ads on frontend

Backend management UI

‚ú® SEO & Performance

Dynamic <title>, <meta name="description">, <link rel="canonical">

JSON-LD structured data (via view composer or component)

Sitemap generation via Laravel route/controller

URL slugs and route model binding

üåê Frontend Design Guidelines

Blade components for UI (e.g., article card, comment box)

Tailwind CSS or Bootstrap 5

Font Awesome or Heroicons

Responsive layout

Modular layout system with layouts/app.blade.php

üß© Coding Principles (Laravel)

Use strict types: declare(strict_types=1);

Use Eloquent ORM for all data models

Use Form Requests for validation

Apply PSR-12 and Laravel naming conventions

Use dependency injection via constructors or service container

All business logic inside Controllers/Services

Blade templating for all views

Split concerns: Models, Controllers, FormRequests, Services, Blade Views

One job = one responsibility (e.g., ImportArticlesJob)

Implement feature tests (PHPUnit) per module


